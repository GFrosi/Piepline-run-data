import os
import sys
import argparse


'''script to generate the full json and generate one json per IP samples with its correspondent inputs'''

def main():
    
    
    path_to_chipseq_generator = args.chip           #path to chipseq generator folder 
    path_to_metadata = args.metadata                #csv file i.e GEO_Metadata_GSEs_input_H3k_12-04-21_TOJSON.tsv
    root_path = args.path                           #path to access the GSE directories. Advise: you should run from a dir containing the requirement.txt file
    path_to_git = args.gitpath                      #path to git (srr_data_struct.py)
    gse = args.gse

    command_line = "#!/bin/bash \n\n\
module load python/3.7 \n\
virtualenv --no-download $SLURM_TMPDIR/env\n\
source $SLURM_TMPDIR/env/bin/activate\n\
pip install --no-index --upgrade pip\n\
pip install --no-index -r  /home/frosig/scratch/chip-seq-ihec-test/SRR-samples/samples/2021_GSE/requirements.txt\n"

    to_write = command_line + "\n\n"
    to_write += "echo Command line written\n\n"


        #the GEOM_metadata/GSEs generated by GEO metadata script - filtered by histones. When we run the pipeline
        #for other samples, we will need to change this file
    command_one = "python " + os.path.join(path_to_chipseq_generator,"gsm_seq.py") + " " + "-t "\
        + os.path.join(path_to_metadata,"GEO_Metadata_GSEs_input_H3k_12-04-21_TOJSON.tsv ")\
        + "-p " + os.path.join(root_path,gse,"data_srr") 

    to_write += "echo Starting write the command one: gsm_seq.py\n\n"
    to_write += command_one + "\n\n"                   # to write, it will generates the seq_type.csv file
    to_write += "echo Command one gsm_seq.py written\n\n"

    name_save_json = gse + "_full.json"
    path_save_json = os.path.join(root_path,gse,name_save_json)

        #the GEOM_metadata/GSEs generated by GEO metadata script - filtered by histones. When we run the pipeline
        #for other samples, we will need to change this file
    command_two = "python " + os.path.join(path_to_chipseq_generator,"chipseq_json_generator.py") + " " + "-t "\
        + os.path.join(path_to_metadata,"GEO_Metadata_GSEs_input_H3k_12-04-21_TOJSON.tsv ")\
        + "-c " + os.path.join(path_to_chipseq_generator,"config","json_config.ini ")\
        + "-s " + os.path.join(root_path,gse,"seq_type.csv ")\
        + "-p " + os.path.join(root_path,gse,"data_srr ") + "> " + path_save_json

    to_write += "echo Starting write the command two: chipseq_json_generator.py\n\n"
    to_write += command_two + "\n\n"
    to_write += "echo Command two chipseq_json_generator.py written\n\n"

        #this file Histone_filtered_count_added.txt was generated by word_dist.py.
        #we will need to change it for other targets
    command_three =  "python " + path_to_git + " " + "-t " + os.path.join("/home/frosig/scratch/chip-seq-ihec-test/SRR-samples/samples/2021_GSE/Histone_filtered_count_added.txt ")\
        + "-j " + path_save_json + " -i 1" 

    to_write += "echo Starting write the command three: srr_struct.py\n\n"
    to_write += command_three + "\n\n"
    to_write += "echo Command three srr_struct.py written\n\n"
    to_write += "echo DONE"

    print(to_write)

       

if __name__ == "__main__":

    parser = argparse.ArgumentParser(

            description="A tool to optimize the json creation for the IHEC pipeline. Returns jsons for each IP sample with their respective corresponding controls"
        )

    parser.add_argument('-l', '--gse', action="store",
        
                            help='GSE id',
                            required=True
                            
                            )

    parser.add_argument('-c', '--chip', action="store",
        
                            help='Absolute path to chipseq generator dir, containing the config dir, gsm_seq.py and chipseq_json_generator.py',
                            required=True
                            
                            )
    parser.add_argument('-m', '--metadata', action="store",
        
                            help='Absolute path to metadata table. This table is separated by | (pipe)',
                            required=True
                            
                            )


    parser.add_argument('-p', '--path', action="store",
        
                            help='Absolute path to the directory with the GSE directories',
                            required=True
                            
                            )


    parser.add_argument('-g', '--gitpath', action="store",
        
                            help='Absolute path to the directory (i.e git repo) with the srr_struct.py',
                            required=True
                            
                            )

    args = parser.parse_args()



    main()
